package com.mini_assignment.user_verification.service;

import static org.junit.jupiter.api.Assertions.assertEquals;

import java.io.File;
import java.io.IOException;
import java.util.List;

import org.hamcrest.Matchers;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.Mockito;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Pageable;
import org.springframework.web.reactive.function.client.WebClient;

import com.fasterxml.jackson.core.exc.StreamReadException;
import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.DatabindException;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.mini_assignment.user_verification.dto.ErrorResponse;
import com.mini_assignment.user_verification.dto.UserGetQuery;
import com.mini_assignment.user_verification.dto.UsersGetResponse;
import com.mini_assignment.user_verification.entity.User;
import com.mini_assignment.user_verification.repository.UserRepository;

public class UserServiceTest {
	
	private UserService userService;

    @BeforeEach
    public void setUp() {
    	var randomUserWebClient = Mockito.mock(WebClient.class);
		var nationalizeWebClient = Mockito.mock(WebClient.class);
		var genderWebClient = Mockito.mock(WebClient.class);
		var userRepository = Mockito.mock(UserRepository.class);
        userService = new UserService(genderWebClient, randomUserWebClient, nationalizeWebClient, userRepository); // Create an instance of your service
    }

	@Test
	public void itShouldReturnSortedListOfUsersBasedOnAgeAndSortOrderEven() throws StreamReadException, DatabindException, IOException{
		
		var randomUserWebClient = Mockito.mock(WebClient.class);
		var nationalizeWebClient = Mockito.mock(WebClient.class);
		var genderWebClient = Mockito.mock(WebClient.class);
		var userRepository = Mockito.mock(UserRepository.class);
		
//		Mockito.when(userRepository.findAll(Matchers.any(Pageable.class))).then
		
		UserService userService = new UserService(genderWebClient, randomUserWebClient, nationalizeWebClient, userRepository);
		UsersGetResponse usersList = userService.getUsers(new UserGetQuery("age", "odd", 5, 0));
		
		ObjectMapper objectMapper = new ObjectMapper();
		List<User> listWithOddAgeFirstTestUsers = objectMapper.readValue(new File("src/test/java/resources/test_users.json"), new TypeReference<List<User>>() {});
		
		
		assertEquals(usersList, listWithOddAgeFirstTestUsers);
	}
	
	@Test
	public void itShouldReturnSortedListOfUsersBasedOnAgeAndSortOrderOdd() {
		
	}
	
	@Test
	public void itShouldReturnSortedListOfUsersBasedOnNameAndSortOrderEven() {
		
	}
	
	@Test
	public void itShouldReturnSortedListOfUsersBasedOnNameAndSortOrderOdd() {
		
	}
	
	@Test
	public void itShouldReturnErrorSizeNotValid() {
		
	}
	
	@Test
	public void itShouldReturnNumericValidatorError() {
		
	}
	
	@Test
	public void itShouldReturnEnglishAlphabetsValidatorError() {
		
	}
	
	@Test
    public void testValidateParameters_ValidParameters() {
        // Define valid parameters
        String sortType = "name";
        String sortOrder = "asc";
        int limit = 5;
        int offset = 0;

        // Call the method
        userService.validateParameters(sortType, sortOrder, limit, offset);

        // No exception should be thrown for valid parameters
    }
	
	
	
}
